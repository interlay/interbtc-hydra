enum IssueStatus {
    Completed
    Cancelled
    RequestedRefund
    Expired
    Pending
}

enum RedeemStatus {
    Completed
    Expired
    Reimbursed
    Retried
    Pending
}

enum Token {
    DOT
    INTR
    KSM
    KINT
    IBTC
    KBTC
}

type NativeToken {
    token: Token!
}

type ForeignAsset {
    asset: Int!
}

union Currency = NativeToken | ForeignAsset

type Vault @entity {
    id: ID!
    accountId: String! @index
    collateralToken: Currency!
    wrappedToken: Currency!
    registrationBlock: Height!
    registrationTimestamp: DateTime!
    lastActivity: Height
}

"Mapping of parachain raw/absolute blocks to parachain active blocks"
type Height @entity {
    id: ID!
    "Should be equal to the absolute value, for determinism"
    absolute: Int! @index
    active: Int!
}

"BTC block stored by BTCRelay"
type RelayedBlock @entity {
    id: ID!
    relayedAtHeight: Height! @index
    timestamp: DateTime!
    blockHash: String!
    backingHeight: Int! @index
    relayer: String
}

type Issue @entity {
    id: ID!
    request: IssueRequest!
    griefingCollateral: BigInt!
    userParachainAddress: String!
    vaultWalletPubkey: String!
    vaultBackingAddress: String!
    vault: Vault!
    period: IssuePeriod!
    backingPayment: IssuePayment @derivedFrom(field: "issue")
    status: IssueStatus @index # TODO: find a way to optimise queries by status
    execution: IssueExecution @derivedFrom(field: "issue")
    amountChange: IssueAmountChange @derivedFrom(field: "issue")
    cancellation: IssueCancellation @derivedFrom(field: "issue")
    refund: Refund @derivedFrom(field: "issue")
}

"Bitcoin payment executing an issue"
type IssuePayment @entity {
    issue: Issue! @unique
    btcTxId: String!
    confirmations: Int!
    blockHeight: Int
    amount: BigInt!
}

type IssueRequest {
    amountWrapped: BigInt!
    bridgeFeeWrapped: BigInt!
    height: Height!
    timestamp: DateTime!
    backingHeight: Int!
}

type IssueExecution @entity {
    issue: Issue! @unique
    amountWrapped: BigInt!
    bridgeFeeWrapped: BigInt!
    height: Height!
    timestamp: DateTime!
}

type IssueAmountChange @entity {
    issue: Issue! @unique
    amountWrapped: BigInt!
    bridgeFeeWrapped: BigInt!
    confiscatedGriefingCollateral: BigInt!
    height: Height!
}

type IssueCancellation @entity {
    issue: Issue! @unique
    height: Height!
    timestamp: DateTime!
}

"Refund on issue overpayment"
type Refund @entity {
    id: ID!
    issue: Issue! @unique
    issueID: String! # bootleg way to add a 2-way looking with minimal fuss
    btcAddress: String!
    amountPaid: BigInt!
    btcFee: BigInt!
    requestHeight: Height!
    requestTimestamp: DateTime!
    executionHeight: Height
    executionTimestamp: DateTime
}

type Redeem @entity {
    id: ID!
    request: RedeemRequest!
    bridgeFee: BigInt!
    collateralPremium: BigInt!
    btcTransferFee: BigInt!
    userParachainAddress: String!
    userBackingAddress: String!
    vault: Vault!
    period: RedeemPeriod!
    backingPayment: RedeemPayment @derivedFrom(field: "redeem")
    status: RedeemStatus
    execution: RedeemExecution @derivedFrom(field: "redeem")
    cancellation: RedeemCancellation @derivedFrom(field: "redeem")
}

type RedeemRequest {
    requestedAmountBacking: BigInt!
    height: Height!
    timestamp: DateTime!
    backingHeight: Int!
}

"Bitcoin payment executing a redeem"
type RedeemPayment @entity {
    redeem: Redeem! @unique
    btcTxId: String!
    confirmations: Int!
    blockHeight: Int
}

type RedeemExecution @entity {
    redeem: Redeem! @unique
    height: Height!
    timestamp: DateTime!
}

type RedeemCancellation @entity {
    redeem: Redeem! @unique
    height: Height!
    timestamp: DateTime!
    slashedCollateral: BigInt!
    reimbursed: Boolean!
}

enum OracleUpdateType {
    ExchangeRate
    FeeEstimation
}

type OracleUpdate @entity {
    id: ID!
    height: Height!
    timestamp: DateTime!
    oracleId: String!
    type: OracleUpdateType!
    typeKey: Currency
    updateValue: BigInt!
}

enum VolumeType {
    Issued
    Redeemed
    Collateral
    Staked
}

type CumulativeVolume @entity {
    id: ID!
    type: VolumeType!
    tillTimestamp: DateTime!
    amount: BigInt!
}

type CumulativeVolumePerCurrencyPair @entity {
    id: ID!
    type: VolumeType!
    tillTimestamp: DateTime!
    amount: BigInt!
    wrappedCurrency: Currency
    collateralCurrency: Currency
}

type IssuePeriod @entity {
    height: Height!
    timestamp: DateTime!
    value: Int!
}

type RedeemPeriod @entity {
    height: Height!
    timestamp: DateTime!
    value: Int!
}

type Transfer @entity {
    id: ID!
    token: Currency!
    amount: BigInt!
    from: String! @index
    to: String! @index
    height: Height!
    timestamp: DateTime!
}
